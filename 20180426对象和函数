JavaScript 对象
  JavaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。
  在 JavaScript 中，对象是拥有属性和方法的数据。
  在 JavaScript 中，对象是数据（变量），拥有属性和方法。
  当像这样声明一个 JavaScript 变量时：
  var txt = "Hello";
  实际上已经创建了一个 JavaScript 字符串对象。字符串对象拥有内建的属性 length。对于上面的字符串来说，length 的值是 5。
  字符串对象同时拥有若干个内建的方法。
  属性：txt.length=5
  方法：txt.indexOf()
  txt.replace()
  txt.search()
  提示：在面向对象的语言中，属性和方法常被称为对象的成员。
创建 JavaScript 对象，JavaScript 中的几乎所有事务都是对象：字符串、数字、数组、日期、函数，等等。
  你也可以创建自己的对象。本例创建名为 "person" 的对象，并为其添加了四个属性：
  <script>
  person=new Object();
  person.firstname="Bill";
  person.lastname="Gates";
  person.age=56;
  person.eyecolor="blue";
  document.write(person.firstname + " is " + person.age + " years old.");
  </script>
访问对象属性的语法是：
  objectName.propertyName
  本例使用 String 对象的 length 属性来查找字符串的长度：
  var message="Hello World!";
  var x=message.length;
  在以上代码执行后，x 的值是：12
访问对象的方法，可以通过下面的语法调用方法：
  objectName.methodName()
  这个例子使用 String 对象的 toUpperCase() 方法来把文本转换为大写：
  var message="Hello world!";
  var x=message.toUpperCase();
  在以上代码执行后，x 的值是：HELLO WORLD!


JavaScript 函数
  函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。
 JavaScript 函数语法
  函数就是包裹在花括号中的代码块，前面使用了关键词 function：
  function functionname()
  {
  这里是要执行的代码
  }
  当调用该函数时，会执行函数内的代码。
  可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。
  提示：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。
调用带参数的函数，在调用函数时，可以向其传递值，这些值被称为参数。这些参数可以在函数中使用。可以发送任意多的参数，由逗号 (,) 分隔：
  myFunction(argument1,argument2)
  当声明函数时，请把参数作为变量来声明：
  function myFunction(var1,var2)
  {
  这里是要执行的代码
  }
  变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。
带有返回值的函数，有时，我们会希望函数将值返回调用它的地方。通过使用 return 语句就可以实现。在使用 return 语句时，函数会停止执行，并返回指定的值。
  语法
  function myFunction()
  {
  var x=5;
  return x;
  }
  上面的函数会返回值 5。
  注释：整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。
  函数调用将被返回值取代：
  var myVar=myFunction();
  myVar 变量的值是 5，也就是函数 "myFunction()" 所返回的值。
  即使不把它保存为变量，您也可以使用返回值：
  document.getElementById("demo").innerHTML=myFunction();
  "demo" 元素的 innerHTML 将成为 5，也就是函数 "myFunction()" 所返回的值。
  您可以使返回值基于传递到函数中的参数：
  <!DOCTYPE html>
<html>
<body>

<p>本例调用的函数会执行一个计算，然后返回结果：</p>

<p id="demo"></p>

<script>
function myFunction(a,b)
{
return a*b;
}

document.getElementById("demo").innerHTML=myFunction(4,3);
</script>

</body>
</html>

在仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的：
function myFunction(a,b)
{
if (a>b)
  {
  return;
  }
x=a+b
}
  如果 a 大于 b，则上面的代码将退出函数，并不会计算 a 和 b 的总和。
局部 JavaScript 变量
  在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。
  可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。
  只要函数运行完毕，本地变量就会被删除。
全局 JavaScript 变量
  在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。
JavaScript 变量的生存期，JavaScript 变量的生命期从它们被声明的时间开始。
  局部变量会在函数运行以后被删除。全局变量会在页面关闭后被删除。
向未声明的 JavaScript 变量来分配值
  如果把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。
  这条语句：
  carname="Volvo";
  将声明一个全局变量 carname，即使它在函数内执行。









